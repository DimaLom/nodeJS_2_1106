{"version":3,"sources":["components/Header/Header.jsx","components/Statistics/Statistics.jsx","components/ResultsView/ResultsView.jsx","components/GameStatus/GameStatus.jsx","utils/bullsCowsCounter.js","components/FormAlert/FormAlert.jsx","containers/UserInput/UserInput.jsx","components/Rules/Rules.jsx","components/MainView/MainView.jsx","utils/randomizer.js","utils/checker.js","containers/App/App.jsx","index.js"],"names":["Header","initGame","guess","Jumbotron","Button","variant","onClick","length","Statistics","bulls","cows","rounds","attempt","fluid","Container","ResultsView","showModal","checkWinner","Modal","show","size","aria-labelledby","centered","closeButton","Title","id","Body","Footer","GameStatus","gameStatus","resultsCounter","user","pc","results","forEach","num","i","indexOf","FormError","inputValid","Alert","UserInput","props","handleChange","e","value","target","setState","validateInput","handleSubmit","guessNumber","checkAttempt","state","bullsCowsCounter","preventDefault","match","this","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","isInvalid","isValid","onChange","required","disabled","Component","Rules","ListGroup","as","Item","MainView","Accordion","defaultActiveKey","Card","Toggle","eventKey","Collapse","randomizer","arr","item","Math","floor","random","push","console","log","checker","App","a","isWin","postLog","fetch","method","headers","body","JSON","stringify","then","d","json","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf30845e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Jumbotron, Button } from \"react-bootstrap\";\r\n\r\nexport default function Header({ initGame, guess }) {\r\n  return (\r\n    <Jumbotron>\r\n      <h1>Быки и Коровы</h1>\r\n      <h6>Добро пожаловать в игру \"Быки и Коровы\"!</h6>\r\n      <p>\r\n        Чтобы начать игру, жми кнопку ниже! Если не знаком с правилами, внизу\r\n        все написано, разворачивай \"Правила игры\" и читай!.\r\n      </p>\r\n      <p>\r\n        <Button variant=\"success\" onClick={initGame}>\r\n          Начать игру!\r\n        </Button>\r\n      </p>\r\n      {guess.length > 0 && <strong>Компьютер загадал число!</strong>}\r\n    </Jumbotron>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Jumbotron, Container } from \"react-bootstrap\";\r\n\r\nexport default function Statistics({ bulls, cows, rounds, attempt }) {\r\n  return (\r\n    <Jumbotron fluid>\r\n      <Container>\r\n        <h5>Статистика</h5>\r\n        {attempt.length > 0 && <p>{`Твоя попытка - ${attempt}`}</p>}\r\n        <p>{`Твои быки - ${bulls}`}</p>\r\n        <p>{`Твои коровы - ${cows}`}</p>\r\n        <p>{`Осталось раундов - ${rounds}`}</p>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nexport default function ResultsView({ initGame, showModal, checkWinner }) {\r\n  return (\r\n    <Modal\r\n      show={showModal}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">Результат</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h4>{checkWinner ? \"Поздравляю! Ты победил!\" : \"Увы, ты проиграл!\"}</h4>\r\n        <p>Давай начнем сначала?</p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"success\" onClick={initGame}>\r\n          Начать игру!\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Statistics from \"../Statistics\";\r\nimport ResultsView from \"../ResultsView\";\r\n\r\nexport default function GameStatus({\r\n  attempt,\r\n  gameStatus,\r\n  rounds,\r\n  bulls,\r\n  cows,\r\n  initGame,\r\n  showModal,\r\n}) {\r\n  if (gameStatus && rounds > 0) {\r\n    return (\r\n      <Statistics bulls={bulls} cows={cows} rounds={rounds} attempt={attempt} />\r\n    );\r\n  } else {\r\n    return (\r\n      <ResultsView\r\n        initGame={initGame}\r\n        showModal={showModal}\r\n        checkWinner={rounds > 0 ? true : false}\r\n      />\r\n    );\r\n  }\r\n}\r\n","function resultsCounter(user, pc) {\r\n  const results = {\r\n    bulls: 0,\r\n    cows: 0,\r\n  };\r\n\r\n  const attempt = [...user];\r\n\r\n  attempt.forEach((num, i) => {\r\n    if (+num === pc[i]) {\r\n      results.bulls++;\r\n    } else if (pc.indexOf(+num) >= 0) {\r\n      results.cows++;\r\n    }\r\n  });\r\n  return results;\r\n}\r\n\r\nexport default resultsCounter;\r\n","import React from \"react\";\r\n\r\nimport { Alert } from \"react-bootstrap\";\r\nexport default function FormError({ inputValid }) {\r\n  if (!inputValid) {\r\n    return (\r\n      <Alert variant=\"danger\">\r\n        Внимание! Нужно ввести <strong>четырёхзначное число</strong>! Будьте\r\n        внимательней!\r\n      </Alert>\r\n    );\r\n  } else {\r\n    return (\r\n      <Alert variant=\"info\">Хм... Интересный вариант! Жми \"Угадать\"!</Alert>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport bullsCowsCounter from \"../../utils/bullsCowsCounter\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport FormError from \"../../components/FormAlert\";\r\n\r\nclass UserInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      inputValid: false,\r\n    };\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const value = e.target.value;\r\n    this.setState({ value: value }, () => {\r\n      this.validateInput(value);\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    const { guessNumber, checkAttempt } = this.props;\r\n    const { value } = this.state;\r\n    const { bulls, cows } = bullsCowsCounter(value, guessNumber);\r\n\r\n    checkAttempt(bulls, cows, value);\r\n\r\n    this.setState({ value: \"\", inputValid: false });\r\n\r\n    e.preventDefault();\r\n  };\r\n\r\n  validateInput = (value) => {\r\n    let inputValid = this.state.inputValid;\r\n\r\n    inputValid = value.match(/\\b\\d{4}\\b/);\r\n\r\n    this.setState({ inputValid: inputValid });\r\n  };\r\n\r\n  render() {\r\n    const { value, inputValid } = this.state;\r\n    const { guessNumber } = this.props;\r\n    if (guessNumber.length > 0) {\r\n      return (\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group controlId=\"userNumber\">\r\n            <Form.Label>\r\n              <FormError inputValid={inputValid} />\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              size=\"sm\"\r\n              placeholder=\"Твой вариант?..\"\r\n              isInvalid={!inputValid}\r\n              isValid={inputValid}\r\n              value={value}\r\n              onChange={this.handleChange}\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Button disabled={!inputValid} variant=\"primary\" type=\"submit\">\r\n            Угадать\r\n          </Button>\r\n        </Form>\r\n      );\r\n    } else {\r\n      return (\r\n        <p>Чтобы увидеть поле ввода и начать угадывать, нажми \"Начать игру\"!</p>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserInput;\r\n","import React from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\n\r\nexport default function Rules() {\r\n  return (\r\n    <ListGroup variant=\"flush\" as=\"ul\">\r\n      <ListGroup.Item as=\"li\">Компьютер загадывает любое четырёхзначное число.</ListGroup.Item>\r\n      <ListGroup.Item as=\"li\">Вы вводите свой вариант.</ListGroup.Item>\r\n      <ListGroup.Item as=\"li\">Если цифра совпала, но стоит не на своем месте - это корова.</ListGroup.Item>\r\n      <ListGroup.Item as=\"li\">Если цифра совпала и стоит на своем месте - это бык.</ListGroup.Item>\r\n      <ListGroup.Item as=\"li\">Нужно угадать число с 5 попыток.</ListGroup.Item>\r\n    </ListGroup>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport UserInput from \"../../containers/UserInput\";\r\nimport Rules from \"../Rules\";\r\n\r\nimport { Button, Card, Accordion } from \"react-bootstrap\";\r\n\r\nexport default function MainView({ guess, checkAttempt }) {\r\n  return (\r\n    <Accordion defaultActiveKey=\"0\">\r\n      <Card>\r\n        <Card.Header>\r\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n            Правила игры\r\n          </Accordion.Toggle>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"1\">\r\n          <Card.Body>\r\n            <Rules />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n      <Card>\r\n        <Card.Header>\r\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n            Поле ввода\r\n          </Accordion.Toggle>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n          <Card.Body>\r\n            <UserInput guessNumber={guess} checkAttempt={checkAttempt} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  );\r\n}\r\n","function randomizer() {\r\n  const arr = [];\r\n  while (arr.length < 4) {\r\n    const item = Math.floor(Math.random() * 10);\r\n    if (arr.indexOf(item) < 0) arr.push(item);\r\n  }\r\n  console.log(`The guessing number: ${arr}`);\r\n  return arr;\r\n}\r\n\r\nexport default randomizer;\r\n","function checker(bulls, rounds) {\r\n  return bulls === 4 && rounds > 0 ? false : true;\r\n}\r\n\r\nexport default checker;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Header from \"../../components/Header\";\r\nimport GameStatus from \"../../components/GameStatus\";\r\nimport MainView from \"../../components/MainView\";\r\n\r\nimport randomizer from \"../../utils/randomizer\";\r\nimport checker from \"../../utils/checker\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      guess: [],\r\n      attempt: [],\r\n      bulls: 0,\r\n      cows: 0,\r\n      rounds: 5,\r\n      gameStatus: true,\r\n    };\r\n  }\r\n\r\n  initGame = () => {\r\n    const guessNumber = randomizer();\r\n\r\n    this.setState({\r\n      guess: guessNumber,\r\n      attempt: [],\r\n      bulls: 0,\r\n      cows: 0,\r\n      rounds: 5,\r\n      gameStatus: true,\r\n    });\r\n  };\r\n\r\n  checkAttempt = async (bulls, cows, value) => {\r\n    const { rounds } = this.state;\r\n    const isWin = checker(bulls, rounds);\r\n\r\n    await this.setState((state) => {\r\n      return {\r\n        gameStatus: isWin,\r\n        attempt: value,\r\n        bulls: bulls,\r\n        cows: cows,\r\n        rounds: state.rounds - 1,\r\n      };\r\n    });\r\n\r\n    if (!isWin || rounds === 1) {\r\n      this.postLog();\r\n    }\r\n  };\r\n\r\n  postLog = () => {\r\n    const { guess, attempt, rounds, gameStatus } = this.state;\r\n\r\n    return fetch(\"/logs\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ guess, attempt, rounds, gameStatus }),\r\n    }).then((d) => d.json());\r\n  };\r\n\r\n  render() {\r\n    const { guess, attempt, bulls, cows, gameStatus, rounds } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Header initGame={this.initGame} guess={guess} />\r\n        <GameStatus\r\n          attempt={attempt}\r\n          bulls={bulls}\r\n          cows={cows}\r\n          gameStatus={gameStatus}\r\n          rounds={rounds}\r\n          initGame={this.initGame}\r\n          showModal={!gameStatus || rounds === 0 ? true : false}\r\n        />\r\n        <MainView guess={guess} checkAttempt={this.checkAttempt} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}